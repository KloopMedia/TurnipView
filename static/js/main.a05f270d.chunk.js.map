{"version":3,"sources":["components/custom-widgets/file-widget/CustomFileWidget.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["window","Android","CustomFileWidget","props","useState","formData","files","setFiles","useEffect","onChange","console","log","type","event","lFiles","target","multiple","allowMultipleFiles","onClick","pickVideo","map","file","i","filename","progress","App","schema","setSchema","uiSchema","setUiSchema","data","setData","widgets","addEventListener","e","JSON","stringify","detail","parse","listenersReady","removeEventListener","style","padding","v","stringData","setFormData","onSubmit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAIAA,OAAOC,QAAUD,OAAOC,SAAW,GAEnC,IAkDeC,EAlDU,SAACC,GACtB,MAAgCC,mBAAS,eAAID,EAAME,WAAnD,mBAAOA,EAAP,KACA,GADA,KAC0BD,mBAAc,KAAxC,mBAAOE,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACNL,EAAMM,SAASJ,KAChB,CAACA,IAEJK,QAAQC,IAAIR,GAuBZ,OACI,gCACI,uBACIS,KAAK,OACLH,SAzBS,SAACI,GAClB,IAAMC,EAAM,YAAOD,EAAME,OAAOT,OAChCC,EAASO,IAwBDE,SAAUb,EAAMc,mBAChBC,QAAU,kBAAMlB,OAAOC,QAAQkB,eAElCb,EAAMc,KAAI,SAACC,EAAWC,GAEXD,EAAKE,SACuBF,EAAKG,SAFzC,UAAaH,EAAKE,SAAlB,YAA8BD,U,cCnC9CtB,OAAOC,QAAUD,OAAOC,SAAW,GA4EpBwB,MAzEf,WACI,MAA4BrB,mBAAS,IAArC,mBAAOsB,EAAP,KAAeC,EAAf,KACA,EAAgCvB,mBAAS,IAAzC,mBAAOwB,EAAP,KAAiBC,EAAjB,KACA,EAAwBzB,mBAAS,IAAjC,mBAAO0B,EAAP,KAAaC,EAAb,KACA,EAAsC3B,mBAAS,IAA/C,mBAEM4B,GAFN,UAEgB,CACZX,KAAMnB,IAqDV,OAlDAM,qBAAU,WAqBN,OAnBAR,OAAOiC,iBAAiB,sBAAsB,SAACC,GACvCxB,QAAQC,IAAIwB,KAAKC,UAAUF,EAAEG,SAC7BV,EAAUQ,KAAKG,MAAMJ,EAAEG,YAI/BrC,OAAOiC,iBAAiB,oBAAoB,SAACC,GACrCxB,QAAQC,IAAIwB,KAAKC,UAAUF,EAAEG,SAC7BR,EAAYM,KAAKG,MAAMJ,EAAEG,YAKjCrC,OAAOiC,iBAAiB,sBAAsB,SAACC,GACvCxB,QAAQC,IAAIwB,KAAKC,UAAUF,EAAEG,SAC7BN,EAAQI,KAAKG,MAAMJ,EAAEG,YAG7BrC,OAAOC,QAAQsC,iBACR,WAEHvC,OAAOwC,oBAAoB,sBAAsB,SAAAN,GAAC,OAAIxB,QAAQC,IAAI,uBAAwBuB,EAAEG,WAE5FrC,OAAOwC,oBAAoB,oBAAoB,SAAAN,GAAC,OAAIxB,QAAQC,IAAI,uBAAwBuB,EAAEG,cAE/F,IAwBC,qBAAKI,MAAO,CAACC,QAAS,IAAtB,SACI,cAAC,IAAD,CAAMhB,OAAQA,EACRE,SAAUA,EACVvB,SAAUyB,EACVE,QAASA,EACTvB,SAtBO,SAACkC,GAClBZ,EAAQY,EAAEtC,UACV,IAAIuC,EAAaT,KAAKC,UAAUO,EAAEtC,UAC9B,YAAaL,QACbA,OAAOC,QAAQ4C,YAAYD,IAmBrBE,SAXO,SAACZ,GAClBH,EAAQG,EAAE7B,gBCzDH0C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a05f270d.chunk.js","sourcesContent":["import {Button} from '@material-ui/core'\r\nimport React, {useEffect, useState} from 'react'\r\nimport LinearProgressWithLabel from './LinearProgressWithLabel'\r\n\r\nwindow.Android = window.Android || {};\r\n\r\nconst CustomFileWidget = (props: any) => {\r\n    const [formData, setFormData] = useState({...props.formData})\r\n    const [files, setFiles] = useState<any>([])\r\n\r\n    useEffect(() => {\r\n        props.onChange(formData)\r\n    }, [formData])\r\n\r\n    console.log(props)\r\n\r\n    const handleChange = (event: any) => {\r\n        const lFiles = [...event.target.files]\r\n        setFiles(lFiles)\r\n        // if (\"Android\" in window) {\r\n        //     window.Android.showToast(test);\r\n        // }\r\n        // console.log(\"Files selected: \", file)\r\n        // var reader = new FileReader();\r\n        // reader.onload = function (event:any) {\r\n        //     // The file's text will be printed here\r\n        //     let blob = new Blob([new Uint8Array(event.target.result)], {type: file.type });\r\n        //     console.log(event.target.result)\r\n        //     console.log(blob)\r\n        // };\r\n        //\r\n        // reader.readAsDataURL(file);\r\n        // return (event: any) => {\r\n        //     setFormData(files)\r\n        // };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"file\"\r\n                onChange={handleChange}\r\n                multiple={props.allowMultipleFiles}\r\n                onClick={ () => window.Android.pickVideo() }\r\n            />\r\n            {files.map((file: any, i: number) => {\r\n                <div key={`${file.filename}_${i}`}>\r\n                    <p>{file.filename}</p>\r\n                    <LinearProgressWithLabel value={file.progress}/>\r\n                </div>\r\n            })}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CustomFileWidget\r\n","import React, {useEffect, useState} from 'react';\r\nimport Form from '@rjsf/bootstrap-4'\r\nimport CustomFileWidget from \"./components/custom-widgets/file-widget/CustomFileWidget\";\r\nimport './App.css';\r\nimport schemaJson from './schema.json'\r\nimport schemaUi from './ui.json'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ndeclare global {\r\n    interface Window { Android: any; }\r\n}\r\nwindow.Android = window.Android || {};\r\n// const evt = new Event('android_event', {'bubbles':true, 'cancelable':false});\r\n\r\nfunction App() {\r\n    const [schema, setSchema] = useState({});\r\n    const [uiSchema, setUiSchema] = useState({});\r\n    const [data, setData] = useState({});\r\n    const [exampleText, setExampleText] = useState(\"\")\r\n\r\n    const widgets = {\r\n        file: CustomFileWidget\r\n    };\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        window.addEventListener('android_json_event', (e: any) => {\r\n                console.log(JSON.stringify(e.detail))\r\n                setSchema(JSON.parse(e.detail))\r\n            }\r\n        )\r\n        // @ts-ignore\r\n        window.addEventListener('android_ui_event', (e: any) => {\r\n                console.log(JSON.stringify(e.detail))\r\n                setUiSchema(JSON.parse(e.detail))\r\n            }\r\n        )\r\n\r\n        // @ts-ignore\r\n        window.addEventListener('android_data_event', (e: any) => {\r\n                console.log(JSON.stringify(e.detail))\r\n                setData(JSON.parse(e.detail))\r\n            }\r\n        )\r\n        window.Android.listenersReady();\r\n        return () => {\r\n            // @ts-ignore\r\n            window.removeEventListener('android_json_event', e => console.log(\"Event inside webview\", e.detail));\r\n            // @ts-ignore\r\n            window.removeEventListener('android_ui_event', e => console.log(\"Event inside webview\", e.detail));\r\n        };\r\n    }, []);\r\n\r\n    const handleFileChange = (change: any) => {\r\n        console.log(change)\r\n    }\r\n\r\n    // @ts-ignore\r\n    const handleChange = (v) => {\r\n        setData(v.formData)\r\n        let stringData = JSON.stringify(v.formData)\r\n        if (\"Android\" in window) {\r\n            window.Android.setFormData(stringData);\r\n        }\r\n        // for (let prop in window)\r\n        //     console.log(prop);\r\n        // if (\"Android\" in window)\r\n        //     console.log(window.Android);\r\n    };\r\n\r\n    const handleSubmit = (e: any) => {\r\n        setData(e.formData)\r\n    }\r\n\r\n    return (\r\n        <div style={{padding: 15}}>\r\n            <Form schema={schema as any}\r\n                  uiSchema={uiSchema}\r\n                  formData={data}\r\n                  widgets={widgets}\r\n                  onChange={handleChange}\r\n                  onSubmit={handleSubmit}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}