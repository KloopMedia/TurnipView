{"version":3,"sources":["components/custom-widgets/file-widget/LinearProgressWithLabel.tsx","components/custom-widgets/file-widget/CustomFileWidget.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LinearProgressWithLabel","props","Box","display","alignItems","width","mr","LinearProgress","variant","minWidth","Typography","color","Math","round","value","window","Android","CustomFileWidget","schema","id","formContext","disabled","useState","files","setFiles","useEffect","console","log","JSON","stringify","hasOwnProperty","filesData","parsed","parse","newFiles","Object","keys","map","filename","fileName","downloadUri","progress","length","filesObj","forEach","file","onChange","className","title","Button","onClick","pickFile","style","backgroundColor","size","i","paddingTop","href","paddingLeft","parseInt","App","setSchema","uiSchema","setUiSchema","data","setData","fileData","setFileData","isComplete","setIsComplete","widgets","customfile","addEventListener","e","detail","stageData","jsonSchema","listenersReady","removeEventListener","padding","formData","v","onSubmit","stringData","onFormSubmit","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAoBeA,EAfiB,SAACC,GAC7B,OACI,eAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAA/B,UACI,cAACF,EAAA,EAAD,CAAKG,MAAM,OAAOC,GAAI,EAAtB,SACI,cAACC,EAAA,EAAD,aAAgBC,QAAQ,eAAkBP,MAE9C,cAACC,EAAA,EAAD,CAAKO,SAAU,GAAf,SACI,cAACC,EAAA,EAAD,CAAYF,QAAQ,QAAQG,MAAM,gBAAlC,mBAAsDC,KAAKC,MACvDZ,EAAMa,OADV,a,SCLhBC,OAAOC,QAAUD,OAAOC,SAAW,GAEnC,IAwEeC,EAxEU,SAAChB,GACtB,IAAOiB,EAA4CjB,EAA5CiB,OAAQC,EAAoClB,EAApCkB,GAAIC,EAAgCnB,EAAhCmB,YAAaC,EAAmBpB,EAAnBoB,SAAUP,EAASb,EAATa,MAC1C,EAA0BQ,mBAAmC,IAA7D,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACN,GAAIL,IACAM,QAAQC,IAAI,cAAeC,KAAKC,UAAUT,IACtCA,EAAYU,eAAeX,IAAK,CAChCO,QAAQC,IAAI,WACZ,IAAII,EAAYX,EAAYD,GAC5BO,QAAQC,IAAI,YAAaC,KAAKC,UAAUE,IACxCP,EAASO,MAGlB,CAACX,IAEJK,qBAAU,WAEN,GADAC,QAAQC,IAAI,QAASb,GACjBA,EAAO,CACP,IAAIkB,EAASJ,KAAKK,MAAMnB,GACpBoB,EAAWC,OAAOC,KAAKJ,GAAQK,KAAI,SAAAC,GACnC,MAAO,CAACC,SAAUD,EAAUE,YAAaR,EAAOM,GAAWG,SAAU,QAEzEjB,EAASU,MAEd,CAACpB,IAEJW,qBAAU,WACN,GAAIF,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOmB,QAAS,EAAG,CAC5B,IAAIC,EAAgB,GACpBpB,EAAMqB,SAAQ,SAAAC,GACNA,EAAKL,cACLG,EAASE,EAAKN,UAAYM,EAAKL,gBAGvC,IAAIX,EAAYD,KAAKC,UAAUc,GAC/B1C,EAAM6C,SAASjB,MAEpB,CAACN,IAQJ,OACI,gCACI,uBAAOwB,UAAW,aAAlB,gBAAiC7B,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAQ8B,QACzC,uBACA,cAACC,EAAA,EAAD,CACI5B,SAAUA,EACV6B,QAZQ,WACZ,YAAanC,QACbA,OAAOC,QAAQmC,SAAShC,IAWpBiC,MAAO,CAACC,gBAAiB,WACzBC,KAAK,KAJT,yBASC/B,GAASA,EAAMc,KAAI,SAACQ,EAAWU,GAAZ,aAChB,sBAAoCH,MAAO,CAACI,WAAY,IAAxD,UACI,sBAAKJ,MAAO,CAACjD,QAAS,QAAtB,UACI,mCAAI0C,QAAJ,IAAIA,OAAJ,EAAIA,EAAMN,WACS,MAAd,OAAJM,QAAI,IAAJA,OAAA,EAAAA,EAAMJ,WAAmB,mBAAGM,UAAU,eAAeU,KAAI,OAAEZ,QAAF,IAAEA,OAAF,EAAEA,EAAML,YAAaY,MAAO,CAACM,YAAa,IAA1E,2BAE7BC,SAAQ,OAACd,QAAD,IAACA,OAAD,EAACA,EAAMJ,UAAY,KAAO,cAAC,EAAD,CAAyB3B,MAAK,iBAAE+B,QAAF,IAAEA,OAAF,EAAEA,EAAMJ,gBAAR,QAAoB,MALzF,iBAAaI,QAAb,IAAaA,OAAb,EAAaA,EAAMN,SAAnB,YAA+BgB,W,cCvD/CxC,OAAOC,QAAUD,OAAOC,SAAW,GAgFpB4C,MA5Ef,WACI,MAA4BtC,mBAAS,IAArC,mBAAOJ,EAAP,KAAe2C,EAAf,KACA,EAAgCvC,mBAAS,IAAzC,mBAAOwC,EAAP,KAAiBC,EAAjB,KACA,EAAwBzC,mBAAS,IAAjC,mBAAO0C,EAAP,KAAaC,EAAb,KACA,EAAgC3C,mBAAS,IAAzC,mBAAO4C,EAAP,KAAiBC,EAAjB,KACA,EAAoC7C,oBAAS,GAA7C,mBAAO8C,EAAP,KAAmBC,EAAnB,KAEMC,EAAU,CACZC,WAAYtD,GAmDhB,OAhDAQ,qBAAU,WAuBN,OArBAV,OAAOyD,iBAAiB,wBAAwB,SAACC,GACzC/C,QAAQC,IAAIC,KAAKC,UAAU4C,EAAEC,SAC7B,IAAMC,EAAY/C,KAAKK,MAAMwC,EAAEC,QAC/Bb,EAAUc,EAAUC,YACpBb,EAAYY,EAAUb,UACtBO,EAAcM,EAAUP,eAIhCrD,OAAOyD,iBAAiB,sBAAsB,SAACC,GACvC/C,QAAQC,IAAI,cAAeC,KAAKC,UAAU4C,EAAEC,SAC5CT,EAAQrC,KAAKK,MAAMwC,EAAEC,YAI7B3D,OAAOyD,iBAAiB,sBAAsB,SAACC,GACvC/C,QAAQC,IAAIC,KAAKC,UAAU4C,EAAEC,SAC7BP,EAAYvC,KAAKK,MAAMwC,EAAEC,YAGjC3D,OAAOC,QAAQ6D,iBACR,WAEH9D,OAAO+D,oBAAoB,sBAAsB,SAAAL,GAAC,OAAI/C,QAAQC,IAAI,uBAAwB8C,EAAEC,WAE5F3D,OAAO+D,oBAAoB,oBAAoB,SAAAL,GAAC,OAAI/C,QAAQC,IAAI,uBAAwB8C,EAAEC,WAE1F3D,OAAO+D,oBAAoB,sBAAsB,SAAAL,GAAC,OAAI/C,QAAQC,IAAI,uBAAwB8C,EAAEC,WAE5F3D,OAAO+D,oBAAoB,sBAAsB,SAAAL,GAAC,OAAI/C,QAAQC,IAAI,uBAAwB8C,EAAEC,cAEjG,IAgBC,qBAAKtB,MAAO,CAAC2B,QAAS,GAAtB,SACI,cAAC,IAAD,CAAM7D,OAAQA,EACR4C,SAAUA,EACVkB,SAAUhB,EACVM,QAASA,EACTjD,SAAU+C,EACVhD,YAAa8C,EACbpB,SApBO,SAACmC,GAClBhB,EAAQgB,EAAED,WAoBAE,SAjBO,SAACT,GAClBR,EAAQQ,EAAEO,UACV,IAAIG,EAAavD,KAAKC,UAAU4C,EAAEO,UAC9B,YAAajE,QACbA,OAAOC,QAAQoE,aAAaD,IAM5B,SASI,cAAClC,EAAA,EAAD,CAAQoC,KAAM,SAAUjC,MAAO,CAACC,gBAAiB,WAAYhC,SAAU+C,EAAvE,yBC1EDkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.809f0408.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst LinearProgressWithLabel = (props: any) => {\r\n    return (\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n            <Box width=\"100%\" mr={1}>\r\n                <LinearProgress variant=\"determinate\" {...props} />\r\n            </Box>\r\n            <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default LinearProgressWithLabel","import React, {useEffect, useState} from 'react'\r\nimport LinearProgressWithLabel from './LinearProgressWithLabel'\r\nimport {Button} from \"react-bootstrap\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\ntype fileParams = { fileName: string, progress: number, downloadUri?: string }\r\n\r\nwindow.Android = window.Android || {};\r\n\r\nconst CustomFileWidget = (props: any) => {\r\n    const {schema, id, formContext, disabled, value} = props;\r\n    const [files, setFiles] = useState<fileParams[] | undefined>([])\r\n\r\n    useEffect(() => {\r\n        if (formContext) {\r\n            console.log(\"formContext\", JSON.stringify(formContext))\r\n            if (formContext.hasOwnProperty(id)) {\r\n                console.log(\"SAME ID\")\r\n                let filesData = formContext[id]\r\n                console.log(\"filesData\", JSON.stringify(filesData))\r\n                setFiles(filesData)\r\n            }\r\n        }\r\n    }, [formContext])\r\n\r\n    useEffect(() => {\r\n        console.log(\"value\", value)\r\n        if (value) {\r\n            let parsed = JSON.parse(value)\r\n            let newFiles = Object.keys(parsed).map(filename => {\r\n                return {fileName: filename, downloadUri: parsed[filename], progress: 100}\r\n            })\r\n            setFiles(newFiles)\r\n        }\r\n    }, [value])\r\n\r\n    useEffect(() => {\r\n        if (files && files?.length > 0) {\r\n            let filesObj: any = {}\r\n            files.forEach(file => {\r\n                if (file.downloadUri) {\r\n                    filesObj[file.fileName] = file.downloadUri\r\n                }\r\n            })\r\n            let stringify = JSON.stringify(filesObj)\r\n            props.onChange(stringify)\r\n        }\r\n    }, [files])\r\n\r\n    const handleClick = () => {\r\n        if (\"Android\" in window) {\r\n            window.Android.pickFile(id);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label className={\"form-label\"}>{schema?.title}</label>\r\n            <br/>\r\n            <Button\r\n                disabled={disabled}\r\n                onClick={handleClick}\r\n                style={{backgroundColor: \"#1EB980\"}}\r\n                size=\"sm\"\r\n            >\r\n                Upload File\r\n            </Button>\r\n\r\n            {files && files.map((file: any, i: number) => (\r\n                <div key={`${file?.fileName}_${i}`} style={{paddingTop: 10}}>\r\n                    <div style={{display: 'flex'}}>\r\n                        <p>{file?.fileName}</p>\r\n                        {file?.progress == 100 && <a className=\"text-success\" href={file?.downloadUri} style={{paddingLeft: 10}}>File Saved</a>}\r\n                    </div>\r\n                    {parseInt(file?.progress) < 100 && <LinearProgressWithLabel value={file?.progress ?? 0}/>}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomFileWidget\r\n","import React, {useEffect, useState} from 'react';\r\nimport Form from '@rjsf/bootstrap-4'\r\nimport CustomFileWidget from \"./components/custom-widgets/file-widget/CustomFileWidget\";\r\nimport './App.css';\r\nimport schemaJson from './schema.json'\r\nimport schemaUi from './ui.json'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Button} from \"react-bootstrap\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        Android: any;\r\n    }\r\n}\r\nwindow.Android = window.Android || {};\r\n\r\n// const evt = new Event('android_event', {'bubbles':true, 'cancelable':false});\r\n\r\nfunction App() {\r\n    const [schema, setSchema] = useState({});\r\n    const [uiSchema, setUiSchema] = useState({});\r\n    const [data, setData] = useState({});\r\n    const [fileData, setFileData] = useState({})\r\n    const [isComplete, setIsComplete] = useState(false)\r\n\r\n    const widgets = {\r\n        customfile: CustomFileWidget\r\n    };\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        window.addEventListener('android_schema_event', (e: any) => {\r\n                console.log(JSON.stringify(e.detail))\r\n                const stageData = JSON.parse(e.detail)\r\n                setSchema(stageData.jsonSchema)\r\n                setUiSchema(stageData.uiSchema)\r\n                setIsComplete(stageData.isComplete)\r\n            }\r\n        )\r\n        // @ts-ignore\r\n        window.addEventListener('android_data_event', (e: any) => {\r\n                console.log(\"JS FORMDATA\", JSON.stringify(e.detail))\r\n                setData(JSON.parse(e.detail))\r\n            }\r\n        )\r\n        // @ts-ignore\r\n        window.addEventListener('android_file_event', (e: any) => {\r\n                console.log(JSON.stringify(e.detail))\r\n                setFileData(JSON.parse(e.detail))\r\n            }\r\n        )\r\n        window.Android.listenersReady();\r\n        return () => {\r\n            // @ts-ignore\r\n            window.removeEventListener('android_json_event', e => console.log(\"Event inside webview\", e.detail));\r\n            // @ts-ignore\r\n            window.removeEventListener('android_ui_event', e => console.log(\"Event inside webview\", e.detail));\r\n            // @ts-ignore\r\n            window.removeEventListener('android_data_event', e => console.log(\"Event inside webview\", e.detail));\r\n            // @ts-ignore\r\n            window.removeEventListener('android_file_event', e => console.log(\"Event inside webview\", e.detail));\r\n        };\r\n    }, []);\r\n\r\n    // @ts-ignore\r\n    const handleChange = (v) => {\r\n        setData(v.formData)\r\n    };\r\n\r\n    const handleSubmit = (e: any) => {\r\n        setData(e.formData)\r\n        let stringData = JSON.stringify(e.formData)\r\n        if (\"Android\" in window) {\r\n            window.Android.onFormSubmit(stringData);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{padding: 4}}>\r\n            <Form schema={schema as any}\r\n                  uiSchema={uiSchema}\r\n                  formData={data}\r\n                  widgets={widgets}\r\n                  disabled={isComplete}\r\n                  formContext={fileData}\r\n                  onChange={handleChange}\r\n                  onSubmit={handleSubmit}\r\n            >\r\n                <Button type={\"submit\"} style={{backgroundColor: \"#1EB980\"}} disabled={isComplete}>Submit</Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}